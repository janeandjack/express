{"remainingRequest":"E:\\黎超超\\an-express\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!E:\\黎超超\\an-express\\src\\views\\admin\\user\\PackPendingList.vue?vue&type=template&id=c42e9d36&scoped=true&","dependencies":[{"path":"E:\\黎超超\\an-express\\src\\views\\admin\\user\\PackPendingList.vue","mtime":1603936683986},{"path":"E:\\黎超超\\an-express\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\黎超超\\an-express\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"E:\\黎超超\\an-express\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\黎超超\\an-express\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}